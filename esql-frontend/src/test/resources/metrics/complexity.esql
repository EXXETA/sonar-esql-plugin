BROKER SCHEMA A
PATH B

CREATE COMPUTE MODULE TestFlow_Compute
	CREATE PROCEDURE Procedure() 
	BEGIN
		PROPAGATE TO LABEL 'ABC';
		PROPAGATE TO TERMINAL 1;
		IF A is NULL THEN
			IF b in (c,d,e) THEN
				IF c BETWEEN 1 and 10 THEN
					IF NOT FALSE THEN --Non compliant
						SET OutputRoot=InputRoot;
					END IF;
				ELSEIF ( A = B ) THEN --Compliant
					IF TRUE THEN --Non compliant
						SET OutputRoot=InputRoot;
					END IF;
				ELSEIF A = B.b[0] THEN --Compliant
				ELSEIF FALSE THEN --Compliant
					THROW USER EXCEPTION;
				END IF;
			END IF;
		ELSE
			SET a = (CURRENT_GMTTIME - InputRoot.MQMD.PutTime) MINUTE TO SECOND;
		END IF;
		SET OutputRoot.XMLNSC.abc:abc = THE ( a(b,c,d) );
		SET b = INTERVAL '1' HOUR;
		SET b = CAST(StartDelyIntervalStr AS INTERVAL HOUR TO SECOND);
		SET VAL = CAST('123456' AS DECIMAL(3,0));
		X : WHILE i <= 3 DO
 
        LEAVE X;
        ITERATE X;
      END WHILE X;
	CALL ABC();
	CASE size
	  WHEN minimum + 0 THEN
	    SET description = 'small';
	  WHEN minimum + 0 THEN
	    SET description = 'medium';        
	  ELSE
	    SET description = 'unknown';
	    CALL handleError();
	END CASE;
	END;
	
	CREATE FUNCTION func() RETURNS BOOLEAN
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE VALUE 'U11222' SET a = 1;
		B: LOOP
		END LOOP B;
		REPEAT 
			SET i = i + 1; 
		UNTIL  i>= 3 END REPEAT;
		RETURN TRUE;
		DETACH OutputRoot.a;
		ATTACH a to OutputRoot AS FIRSTCHILD;
		CREATE LASTCHILD OF OutputRoot.XMLNS.TestCase.Root IDENTITY (XML.Element)NSpace1:Element1[2] VALUE 'Element 2 Value';
		CREATE NEXTSIBLING OF targetCursor AS targetCursor REPEAT;
		CREATE LASTCHILD OF OutputRoot DOMAIN('MRM') PARSE(inBitStream, inEncoding, inCCSID, 'DP3UK14002001', 'TestCase', 'XML1', options);
		SET a = OVERLAY ('ABCDEFGHIJ' PLACING '1234' FROM 4 FOR 3);
		PASSTHRU('aaa');
		PROPAGATE DELETE NONE;
		CREATE LASTCHILD OF OutputRoot From InputRoot.A;
		DELETE LASTCHILD OF Cursor;
		RESIGNAL;
		FOR source AS Environment.SourceData.Folder[] DO END FOR;
		MOVE cursor FIRSTCHILD TYPE Name NAME 'Field1';
		DELETE FROM Database.SHAREHOLDINGS AS S WHERE S.ACCOUNTNO = InputBody.AccountNumber;
		INSERT INTO Database.{Source}.{Schema}.{Table} (Name, Value) values ('Joe', 12.34);
		UPDATE Database.StockPrices AS SP SET PRICE = InputBody.Message.StockPrice, B = 1;
		EVAL('SET ' || scalarVar1 || ' = 2;');
		LOG USER TRACE EXCEPTION VALUES(SQLSTATE, 'DivideByZero');
		SET year = EXTRACT(YEAR FROM CURRENT_DATE);
		SET a = ROUND (1,1);
		SET pos = POSITION ('A' IN 'ABCABCABCABCABC' FROM 4);
		SET s = SUBSTRING('Hello World!' FROM 7 FOR 4);
		SET t = TRIM('  a  ');
		SET a = ASBITSTREAM(cursor OPTIONS options CCSID 1208);
		SET l = FOR ALL Body.Invoice.Purchases."Item"[] AS I (I.Quantity <= 50);
		
		SET m = CASE CurrentMonth WHEN '01' THEN 'January' ELSE 'Unknown' END;
		
		SET s = SELECT FIELDVALUE(v.a) FROM vehicle.fb:VEHICLE[] AS v WHERE v.fb:c = Environment.Variables.F;
		
		SET OutputRoot.XMLNS.Data = ROW('granary' AS bread, 'riesling' AS wine, 'stilton' AS cheese);
		
		SET p = PASSTHRU('SELECT * from aaa');
		
		IF Body.Trade.Company LIKE 'I__' THEN END IF;
		
		SET OutputRoot.XMLNS.Data.Result[] = LIST{InputBody.Car.color,
                                                     'green',
                                                     'blue'};
		
	END; 
	
	CREATE PROCEDURE SwapNullable ( 
       IN a INTEGER NULLABLE, 
       OUT b INTEGER NULLABLE, 
       INOUT c INTEGER NULLABLE )
	LANGUAGE CLR
	EXTERNAL NAME "FunctionTests.SwapStringNullable"
	--ASSEMBLY "MyAssembly2"
	--APPDOMAIN "MyDomain"
	;
	
	CREATE PROCEDURE myProc1 (IN P1 INT, OUT P2 INT) LANGUAGE DATABASE DYNAMIC RESULT SETS 2 EXTERNAL NAME "myschema.myproc1";

END MODULE;

CREATE COMPUTE MODULE "A"

END MODULE;

CREATE COMPUTE MODULE "MY TEST"
  CREATE FUNCTION main() RETURNS BOOLEAN 
    BEGIN
      RETURN true;
    END;
END MODULE;
